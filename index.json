[{"uri":"/callToAction.html","title":"Call To Action","content":"\r\n# Call to Action\r\n\r\n## How to contribute\r\n\r\n*Imposter syndrome disclaimer*: I want your help. No really, I do.\r\n\r\nThere might be a little voice inside that tells you you're not ready; that you need to do one more tutorial, or learn another framework, or write a few more blog posts before you can help me with this project.\r\n\r\nI assure you, that's not the case.\r\n\r\nAll Ionide projects has some clear Contribution Guidelines and expectations that you can in every repo - [example here](https://github.com/ionide/ionide-vscode-fsharp/blob/master/CONTRIBUTING.md).\r\n\r\nThe contribution guidelines outline the process that you'll need to follow to get a patch merged. By making expectations and process explicit, I hope it will make it easier for you to contribute.\r\n\r\nAnd you don't just have to write code. You can help out by writing documentation, tests, or even by giving feedback about this work. (And yes, that includes giving feedback about the contribution guidelines.)\r\n\r\nThank you for contributing!\r\n\r\n## Contributing and copyright\r\n\r\nAll Ionide project are hosted on [GitHub](https://github.com/ionide) where you can report issues, fork the project and submit pull requests.\r\n\r\nAll projects are avaliable available under OSS license ([usually MIT](https://github.com/ionide/ionide-vscode-fsharp/blob/master/LICENSE.md)), which allows modification and redistribution for both commercial and non-commercial purposes.\r\n\r\nPlease note that all Ionide project are released with a [Contributor Code of Conduct](https://github.com/ionide/ionide-vscode-fsharp/blob/master/CODE_OF_CONDUCT.md). By participating in this project you agree to abide by its terms."},{"uri":"/index.html","title":"Home","content":"\r\n# Ionide\r\n\r\n<img heigh=\"100\" width=\"100\" src=\"static/images/logo.png\" />\r\n\r\nIonide is an organization which builds **high quality, cross platform developer tools for F#**. Our flag project is Ionide-VSCode - a Visual Studio Code plugin, with more than 1 millions downloads, transforming VSCode into **fully-fledged F# IDE**. But Ionide is more then just editor plugin - we build whole ecosystem of developers tools - from [documentation generator](Tools/fornax.html), through [F# LSP server](Tools/fsac.html), to experimental and innovative projects like [F# Analyzers](Libraries/fsanalyzers.html)\r\n\r\n<img class=\"gif\" src=\"static/images/fsharp.gif\" />\r\n\r\n\r\n### Our goals and motivations\r\n\r\n> We're building cross platform, F# developer tooling\r\n\r\n* Provide cross platform, open source developer tooling for F#\r\n* Provide high quality IDE experience\r\n* Innovate in area of development tooling for F# / FP languages\r\n* Provide set of opinionated tools that work well together\r\n* Focus on UX, everything should Just Work (tm)\r\n* Contribute to the general F# OSS ecosystem\r\n\r\n"},{"uri":"/sponsors.html","title":"Sponsors","content":"\r\n# Our Sponsors\r\n\r\nIonide couldn't be created without support of [Lambda Factory](https://lambdafactory.io). If your company would be interested in supporting development of Ionide, or acquiring commercial support sent us email - lambda_factory@outlook.com.\r\n\r\nYou can also support Ionide development on [Open Collective](https://opencollective.com/ionide). [![Open Collective](https://opencollective.com/ionide/donate/button.png?color=blue)](https://opencollective.com/ionide)\r\n\r\n### Partners\r\n\r\n<div align=\"center\">\r\n\r\n<a href=\"https://lambdafactory.io\"><img src=\"https://cdn-images-1.medium.com/max/332/1*la7_YvDFvrtA720P5bYWBQ@2x.png\" alt=\"drawing\" width=\"100\"/></a>\r\n\r\n</div>\r\n\r\n### Sponsors\r\n\r\n[Become a sponsor](https://opencollective.com/ionide) and get your logo on our README on Github, description in VSCode marketplace and on [ionide.io](http://ionide.io) with a link to your site.\r\n\r\n<div align=\"center\">\r\n    <object type=\"image/svg+xml\" data=\"https://opencollective.com/ionide/tiers/silver-sponsor.svg?avatarHeight=120&width=1000&button=false\"></object>\r\n    <object type=\"image/svg+xml\" data=\"https://opencollective.com/ionide/tiers/bronze-sponsor.svg?avatarHeight=70&width=1000&button=false\"></object>\r\n</div>\r\n"},{"uri":"/Editors/editoresOverview.html","title":"Editors overview","content":"\r\n# Editors overview\r\n\r\nOne of the main goals of the Ionide initiative is providing rich, cross-platform, open-source IDE for F#."},{"uri":"/Editors/index.html","title":"Index","content":""},{"uri":"/Libraries/eventhorizon.html","title":"Ionide.EventHorizon","content":"\r\n# Ionide.EventHorizon\r\n\r\n**GitHub link:** [https://github.com/ionide/FSharp.EventHorizon](https://github.com/ionide/FSharp.EventHorizon)\r\n**License:** [MIT](https://github.com/ionide/FSharp.EventHorizon/blob/master/LICENSE.md)\r\n\r\nAn **experiment** attempting to implement `type holes` and `type-directed search`/`valid hole fits` using F# analyzers. Long story short, it's an attempt of suggesting replacement for the unkown functions using type inferences and finding other entities that have fitting type signature.\r\n\r\n- Read more about `type holes`: [https://downloads.haskell.org/~ghc/7.10.1/docs/html/users_guide/typed-holes.html](https://downloads.haskell.org/~ghc/7.10.1/docs/html/users_guide/typed-holes.html)\r\n- Read more about `type-directed search` in PureScript: [https://github.com/paf31/24-days-of-purescript-2016/blob/master/23.markdown](https://github.com/paf31/24-days-of-purescript-2016/blob/master/23.markdown)\r\n- Read more about `valid hole fits` in GHC: [https://mpg.is/papers/gissurarson2018suggesting.pdf](https://mpg.is/papers/gissurarson2018suggesting.pdf)\r\n\r\nUnlike some of the solutions for other FP languages this is not feature implemented directly in compiler, nor is feature of particular IDE, but it's using F# Analyzers.\r\n\r\nRead more about F# Analyzers:\r\n  - Intro blog post - [https://medium.com/lambda-factory/introducing-f-analyzers-772487889429](https://medium.com/lambda-factory/introducing-f-analyzers-772487889429)\r\n  - FSharp.Analyzers.SDK repo - [https://github.com/ionide/FSharp.Analyzers.SDK](https://github.com/ionide/FSharp.Analyzers.SDK)\r\n  - Sample analyzer implementation - [https://github.com/Krzysztof-Cieslak/FSharp.Analyzers.Sample](https://github.com/Krzysztof-Cieslak/FSharp.Analyzers.Sample)\r\n  - Sample repo showing how to use analyzers - [https://github.com/Krzysztof-Cieslak/AnalyzersShowcase](https://github.com/Krzysztof-Cieslak/AnalyzersShowcase)\r\n\r\n<img class=\"gif\" src=\"/static/images/EventHorizon.png\" />\r\n\r\n## Limitations\r\n\r\nF# Compiler Service is not exposing any API for `subsumption of types`. I've implemented really naive algorithm to check if entity can fit given type hole... but well, it's definitely not following 100% rules of the F# compiler, so not every suggestion is found.\r\n\r\nI think that this limitation is acceptable given that the project is in experiment phase - if it were productized, we would need to expose those missing APIs from F# Compiler Services, so investing more into custom algorithm here would be waste of time"},{"uri":"/Libraries/fsanalyzers.html","title":"FSharp.Analyzers.SDK","content":"\r\n# FSharp.Analyzers.SDK\r\n\r\n**GitHub link:** [https://github.com/ionide/FSharp.Analyzers.SDK](https://github.com/ionide/FSharp.Analyzers.SDK)\r\n**License:** [MIT](https://github.com/ionide/FSharp.Analyzers.SDK/blob/master/LICENSE.md)\r\n\r\n`FSharp.Analyzers.SDK` is a library used for building custom analyzers for FSAC / F# editors. F# analyzers are live, real-time, project based plugins that enables to diagnose source code and surface custom errors, warnings and code fixes into editor. They're heavily influenced and inspired by [Roslyn Analyzers](https://docs.microsoft.com/en-us/visualstudio/code-quality/roslyn-analyzers-overview?view=vs-2019).\r\n\r\nRead more about F# Analyzers here - [https://medium.com/lambda-factory/introducing-f-analyzers-772487889429](https://medium.com/lambda-factory/introducing-f-analyzers-772487889429)\r\n\r\n## Writing Analyzers\r\n\r\nAnalyzers that are consumed by this SDK and from Ionide are simply .NET core class libraries. These class libraries expose a *value* of type `Analyzer` which is effectively a function that has input of type `Context` and returns a list of `Message` records:\r\n\r\n```fsharp\r\nmodule BadCodeAnalyzer\r\n\r\nopen FSharp.Analyzers.SDK\r\n\r\n[<Analyzer>]\r\nlet badCodeAnalyzer : Analyzer =\r\n  fun (context: Context) =\r\n    // inspect context to determine the error/warning messages\r\n    [   ]\r\n```\r\n\r\nNotice how we expose the function `BadCodeAnalyzer.badCodeAnalyzer` with an attribute `[<Analyzer>]` that allows the SDK to detect the function. The input `Context` is a record that contains information about a single F# file such as the typed AST, the AST, the file content, the file name and more. The SDK runs this function against all files of a project during editing. The output messages that come out of the function are eventually used by Ionide to highlight the inspected code as a warning or error depending on the `Severity` level of each message.\r\n\r\n### Analyzer Requirements\r\n\r\nAnalyzers are .NET core class libraries and they are distributed as such. However, since the SDK relies on dynamically loading the analyzers during runtime, there are some requirements to get them to work properly:\r\n - The analyzer class library has to target the `netcoreapp2.0` framework\r\n - The analyzer has to reference the latest `FSharp.Analyzers.SDK` (at least the version used by FsAutoComplete which is subsequently used by Ionide)\r\n\r\n### Packaging and Distribution\r\n\r\nSince analyzers are just .NET core libraries, you can distribute them to the nuget registry just like you would with a normal .NET package. Simply run `dotnet pack --configuration Release` against the analyzer project to get a nuget package and publish it with\r\n\r\n```\r\ndotnet nuget push {NugetPackageFullPath} -s nuget.org -k {NugetApiKey}\r\n```\r\n\r\nHowever, the story is different and slightly more complicated when your analyzer package has third-party dependencies also coming from nuget. Since the SDK dynamically loads the package assemblies (`.dll` files), the assemblies of the dependencies has be there *next* to the main assembly of the analyzer. Using `dotnet pack` will **not** include these dependencies into the output Nuget package. More specifically, the `./lib/netcoreapp2.0` directory of the nuget package must have all the required assemblies, also those from third-party packages. In order to package the analyzer properly with all the assemblies, you need to take the output you get from running:\r\n\r\n```\r\ndotnet publish --configuration Release --framework netcoreapp2.0\r\n```\r\n\r\nagainst the analyzer project and put every file from that output into the `./lib/netcoreapp2.0` directory of the nuget package. This requires some manual work by unzipping the nuget package first (because it is just an archive), modifying the directories then zipping the package again. It can be done using a FAKE build target to automate the work:\r\n\r\n```fsharp\r\n// make ZipFile available\r\n#r \"System.IO.Compression.FileSystem.dll\"\r\n\r\nlet releaseNotes = ReleaseNotes.load \"RELEASE_NOTES.md\"\r\n\r\nTarget.create \"PackAnalyzer\" (fun _ ->\r\n    let analyzerProject = \"src\" </> \"BadCodeAnalyzer\"\r\n    let args =\r\n        [\r\n            \"pack\"\r\n            \"--configuration Release\"\r\n            sprintf \"/p:PackageVersion=%s\" releaseNotes.NugetVersion\r\n            sprintf \"/p:PackageReleaseNotes=\\\"%s\\\"\" (String.concat \"\\n\" releaseNotes.Notes)\r\n            sprintf \"--output %s\" (__SOURCE_DIRECTORY__ </> \"dist\")\r\n        ]\r\n\r\n    // create initial nuget package\r\n    let exitCode = Shell.Exec(\"dotnet\", String.concat \" \" args, analyzerProject)\r\n    if exitCode <> 0 then\r\n        failwith \"dotnet pack failed\"\r\n    else\r\n        match Shell.Exec(\"dotnet\", \"publish --configuration Release --framework netcoreapp2.0\", analyzerProject) with\r\n        | 0 ->\r\n            let nupkg =\r\n                System.IO.Directory.GetFiles(__SOURCE_DIRECTORY__ </> \"dist\")\r\n                |> Seq.head\r\n                |> IO.Path.GetFullPath\r\n\r\n            let nugetParent = DirectoryInfo(nupkg).Parent.FullName\r\n            let nugetFileName = IO.Path.GetFileNameWithoutExtension(nupkg)\r\n\r\n            let publishPath = analyzerProject </> \"bin\" </> \"Release\" </> \"netcoreapp2.0\" </> \"publish\"\r\n            // Unzip the nuget\r\n            ZipFile.ExtractToDirectory(nupkg, nugetParent </> nugetFileName)\r\n            // delete the initial nuget package\r\n            File.Delete nupkg\r\n            // remove stuff from ./lib/netcoreapp2.0\r\n            Shell.deleteDir (nugetParent </> nugetFileName </> \"lib\" </> \"netcoreapp2.0\")\r\n            // move the output of publish folder into the ./lib/netcoreapp2.0 directory\r\n            Shell.copyDir (nugetParent </> nugetFileName </> \"lib\" </> \"netcoreapp2.0\") publishPath (fun _ -> true)\r\n            // re-create the nuget package\r\n            ZipFile.CreateFromDirectory(nugetParent </> nugetFileName, nupkg)\r\n            // delete intermediate directory\r\n            Shell.deleteDir(nugetParent </> nugetFileName)\r\n        | _ ->\r\n            failwith \"dotnet publish failed\"\r\n)\r\n```"},{"uri":"/Tools/dpi.html","title":"dotnet-proj-info","content":"\r\n# dotnet-proj-info\r\n\r\n**GitHub link:** [https://github.com/ionide/dotnet-proj-info](https://github.com/ionide/dotnet-proj-info)\r\n**License:** [MIT](https://github.com/ionide/dotnet-proj-info/blob/master/LICENSE)\r\n\r\n`dotnet-proj-info` is library and command line tool used to parse and evaluate MsBuild files (`.fsproj`). It's used to get out of project files properties, list of files, list of project references, list of .Net references and more. It supports projects targeting both .Net Framework and .Net Core, using either old (verbose) project format or new (SDK-based) one. It's powering project cracking in [FsAutoComplete](/Tools/fsac.html) and solution explorer in [Ionide-VSCode](/Editors/vscode.html)\r\n\r\n### How to use\r\n\r\nInstall with:\r\n\r\n```bash\r\ndotnet tool install -g dotnet-proj\r\n```\r\n\r\nand\r\n\r\n```bash\r\ndotnet proj --help\r\n```\r\n\r\nUsage:\r\n\r\n```\r\ndotnet-proj.\r\n\r\nUSAGE: dotnet-proj [--help] [--verbose] [<subcommand> [<options>]]\r\n\r\nSUBCOMMANDS:\r\n\r\n    prop <options>        get properties\r\n    fsc-args <options>    get fsc arguments\r\n    csc-args <options>    get csc arguments\r\n    p2p <options>         get project references\r\n    net-fw <options>      list the installed .NET Frameworks\r\n    net-fw-ref <options>  get the reference path of given .NET Framework assembly\r\n\r\n    Use 'dotnet-proj <subcommand> --help' for additional information.\r\n\r\nOPTIONS:\r\n\r\n    --verbose, -v         verbose log\r\n    --help                display this list of options.\r\n```\r\n\r\nSubcommands support usual arguments of .NET cli (`dotnet`) where it makes sense, for example:\r\n\r\n- the target project\r\n- `-c` or `--configuration`\r\n- `-f` or `--framework`\r\n- `-r` or `--runtime`"},{"uri":"/Tools/forge.html","title":"Forge","content":"\r\n# Forge\r\n\r\n**GitHub link:** [https://github.com/ionide/Forge](https://github.com/ionide/Forge)\r\n**License:** [Unlicense](https://github.com/ionide/Forge/blob/master/LICENSE)\r\n\r\nForge is a command line tool that provides tasks for creating and manipulation F# projects. It powers such commands as `Add File Above` or `Move File Down` in Ionide-VSCode solution explorer"},{"uri":"/Tools/fornax.html","title":"Fornax","content":"\r\n# Fornax\r\n\r\n**GitHub link:** [https://github.com/ionide/Fornax](https://github.com/ionide/Fornax)\r\n**License:** [MIT](https://github.com/ionide/Fornax/blob/master/LICENSE)\r\n\r\n\r\nFornax is a **scriptable static site generator** using type safe F# DSL to define page layouts. This documentation has been built using Fornax.\r\n\r\n## Installation\r\n\r\nFornax is released as a global .Net Core tool. You can install it with `dotnet tool install fornax -g`\r\n\r\n## CLI Application\r\n\r\nThe main functionality of Fornax comes from CLI applications that lets user scaffold, and generate webpages.\r\n\r\n* `fornax new` - scaffolds new blog in current working directory using really simple template\r\n* `fornax build` - builds webpage, puts output to `_public` folder\r\n* `fornax watch` - starts a small webserver that hosts your generated site, and a background process that recompiles the site whenever any changes are detected. This is the recommended way of working with Fornax.\r\n* `fornax clean` - removes output directory and any temp files\r\n* `fornax version` - prints out the currently-installed version of Fornax\r\n* `fornax help` - prints out help\r\n\r\n## Getting started\r\n\r\nEasiest way to get started with `fornax` is running `fornax new` and than `fornax watch` - this will create fairly minimal blog site template, start `fornax` in watch mode and start webserver. Then you can go to the `localhost:8080` in your browser to see the page, and edit the scaffolded files in editor to make changes.\r\nAdditionally, you can take a look at `samples` folder in this repository - it have couple more `loaders` and `generators` that you can potentially use in your website.\r\n\r\n## Website definition\r\n\r\nFornax is using normal F# code (F# script files) to define any of it's core concepts: `loaders`, `generators` and `config`.\r\n\r\n### SiteContents\r\n\r\n`SiteContents` is fairly simple type that provides access to any information available to the Fornax. The information is put into it by using `loaders` and then can be accessed in the `generators`.\r\n\r\n`SiteContents` has several functions in it's public API:\r\n\r\n```fsharp\r\ntype A = {a: string}\r\ntype B = {b: int; c: int}\r\n\r\nlet sc = SiteContents()\r\nsc.Add({a = \"test\"})\r\nsc.Add({a = \"test2\"})\r\nsc.Add({a = \"test3\"})\r\n\r\nsc.Add({b = 1; c = 3}) //You can add objects of different types, `Add` method is generic.\r\n\r\nlet as = sc.TryGetValues<A>() //This will return option of sequence of all added elements for given type - in this case it will be 3 elements\r\nlet b = sc.TryGetValue<B>() //This will return option of element for given type\r\n```\r\n\r\n### Loaders\r\n\r\n`Loader` is an F# script responsible for loading external data into generation context. The data typically includes things like content of `.md` files, some global site configuration, etc. But since those are normal F# functions, you can do whatever you need.\r\nWant to load information from local database, or from internet? Sure, why not. Want to use World Bank TP to include some of the World Bank statistics? That's also possible - you can use in `loader` any dependency as in normal F# script.\r\n\r\n`Loaders` are normal F# functions that takes as an input `SiteContents` and absolute path to the page root, and returns `SiteContents`:\r\n\r\n```fsharp\r\n#r \"../_lib/Fornax.Core.dll\"\r\n\r\ntype Page = {\r\n    title: string\r\n    link: string\r\n}\r\n\r\nlet loader (projectRoot: string) (siteContent: SiteContents) =\r\n    siteContent.Add({title = \"Home\"; link = \"/\"})\r\n    siteContent.Add({title = \"About\"; link = \"/about.html\"})\r\n    siteContent.Add({title = \"Contact\"; link = \"/contact.html\"})\r\n\r\n    siteContent\r\n```\r\n\r\n**Important note**: You can (and probably should) define multiple loaders - they will all be executed before generation of site, and will propagate information into `SiteContents`\r\n\r\n### Generators\r\n\r\n`Generator` is an F# script responsible for generating output of the Fornax process. This is usually `.html` file, but can be anything else - actually `generator` API just requires to return `string` that will be saved to file. Generators are, again, plain F# functions that as an input takes `SiteContents`, absolute path to the page root, relative path to the file that's currently processed (may be empty for the global generators) and returns `string`:\r\n\r\n```fsharp\r\n#r \"../_lib/Fornax.Core.dll\"\r\n#if !FORNAX\r\n#load \"../loaders/postloader.fsx\"\r\n#endif\r\n\r\nopen Html\r\n\r\nlet generate' (ctx : SiteContents) (_: string) =\r\n    let posts = ctx.TryGetValues<Postloader.Post> () |> Option.defaultValue Seq.empty\r\n\r\n    let psts =\r\n        posts\r\n        |> Seq.toList\r\n        |> List.map (fun p -> span [] [!! p.link] )\r\n\r\n    html [] [\r\n        div [] psts\r\n    ]\r\n\r\nlet generate (ctx : SiteContents) (projectRoot: string) (page: string) =\r\n    generate' ctx page\r\n    |> HtmlElement.ToString\r\n```\r\n\r\n**Important note**: You can (and probably should) define multiple generators - they will generate different kinds of pages and/or content, such as `post`, `index`, `about`, `rss` etc.\r\n\r\n### Configuration\r\n\r\n`Configuration` is a F# script file that defines when which analyzers need to be run, and how to save its output. `Config.fsx` file needs to be put in the root of your site project (the place from which you run `fornax` CLI tool)\r\n\r\n```fsharp\r\n#r \"../_lib/Fornax.Core.dll\"\r\n\r\nopen Config\r\nopen System.IO\r\n\r\nlet postPredicate (projectRoot: string, page: string) =\r\n    let fileName = Path.Combine(projectRoot,page)\r\n    let ext = Path.GetExtension page\r\n    if ext = \".md\" then\r\n        let ctn = File.ReadAllText fileName\r\n        ctn.Contains(\"layout: post\")\r\n    else\r\n        false\r\n\r\nlet staticPredicate (projectRoot: string, page: string) =\r\n    let ext = Path.GetExtension page\r\n    if page.Contains \"_public\" ||\r\n       page.Contains \"_bin\" ||\r\n       page.Contains \"_lib\" ||\r\n       page.Contains \"_data\" ||\r\n       page.Contains \"_settings\" ||\r\n       page.Contains \"_config.yml\" ||\r\n       page.Contains \".sass-cache\" ||\r\n       page.Contains \".git\" ||\r\n       page.Contains \".ionide\" ||\r\n       ext = \".fsx\"\r\n    then\r\n        false\r\n    else\r\n        true\r\n\r\nlet config = {\r\n    Generators = [\r\n        {Script = \"less.fsx\"; Trigger = OnFileExt \".less\"; OutputFile = ChangeExtension \"css\" }\r\n        {Script = \"sass.fsx\"; Trigger = OnFileExt \".scss\"; OutputFile = ChangeExtension \"css\" }\r\n        {Script = \"post.fsx\"; Trigger = OnFilePredicate postPredicate; OutputFile = ChangeExtension \"html\" }\r\n        {Script = \"staticfile.fsx\"; Trigger = OnFilePredicate staticPredicate; OutputFile = SameFileName }\r\n        {Script = \"index.fsx\"; Trigger = Once; OutputFile = NewFileName \"index.html\" }\r\n\r\n    ]\r\n}\r\n\r\n```"},{"uri":"/Tools/fsac.html","title":"FsAutoComplete","content":"\r\n# FsAutoComplete\r\n\r\n**GitHub link:** [https://github.com/fsharp/FsAutoComplete](https://github.com/fsharp/FsAutoComplete)\r\n**License:** [Apache 2.0](https://github.com/fsharp/FsAutoComplete/blob/master/LICENSE)\r\n\r\nThe `FsAutoComplete` project (`FSAC`) provides a backend service for rich editing or intellisense features for editors.\r\nIt can be hosted using the [Language Server Protocol](https://microsoft.github.io/language-server-protocol/).\r\n\r\nCurrently it is used by:\r\n\r\n* [Emacs](https://github.com/fsharp/emacs-fsharp-mode)\r\n* [Vim](https://github.com/fsharp/vim-fsharp)\r\n* [Visual Studio Code](https://github.com/ionide/ionide-vscode-fsharp)\r\n\r\nIt's based on:\r\n\r\n* [FSharp.Compiler.Service](https://github.com/fsharp/FSharp.Compiler.Service/) for F# language info.\r\n* [FSharpLint](https://github.com/fsprojects/FSharpLint/) for the linter feature.\r\n* [Fantomas](https://github.com/fsprojects/fantomas) for the formatting feature.\r\n* [Dotnet.ProjInfo](Tools/dpi.html) for project/solution management.\r\n* [FSharp.Analyzers.SDK](/Libraries/fsanalyzers.html) for custom project based analyzers\r\n\r\n## Required software\r\n\r\nFsAutoComplete can run on .NET/mono or .NET Core. We highly recommend using .Net Core version of FSAC as we plan to remove \"full framework\" version soon - [read more](https://github.com/fsharp/FsAutoComplete/issues/506)\r\n\r\n### FSAC .NET Core\r\n\r\n* .NET Core Sdk (Required: >= 2.1, Recommended: >= 3.0 )\r\n\r\n### FSAC .NET (deprecated)\r\n\r\n* on windows: [Microsoft Build Tools 2015](https://www.microsoft.com/en-us/download/details.aspx?id=48159)\r\n* on unix/mac: Required: Mono >= 5.12, Recommended: Mono >= 5.18\r\n\r\n## Communication protocol\r\n\r\nFsAutoComplete supports [LSP](https://microsoft.github.io/language-server-protocol/) as a communication protocol.\r\n\r\n### Supported LSP endpoints\r\n\r\n* `initialize`\r\n* `textDocument/didOpen`\r\n* `textDocument/didChange`\r\n* `textDocument/didSave`\r\n* `textDocument/hover`\r\n* `textDocument/completion` & `completionItem/resolve`\r\n* `textDocument/rename`\r\n* `textDocument/definition`\r\n* `textDocument/typeDefinition`\r\n* `textDocument/implementation`\r\n* `textDocument/codeAction`:\r\n  * Remove unused `open`\r\n  * Resolve namespace/module\r\n  * Replace unused symbol with `_`\r\n  * Fix typo based on error message\r\n  * Remove redundant qualifier\r\n  * Add missing `new` keyword for `IDisposable`\r\n  * Generate cases for all DU case in pattern matching\r\n  * Generate empty interface implementation\r\n  * Fixes suggested by [FSharpLint](https://github.com/fsprojects/FSharpLint)\r\n* `textDocument/codeLens` & `codeLens/resolve`:\r\n  * signature Code Lenses\r\n  * reference number Code Lenses\r\n* `textDocument/formatting` - powered by [fantomas](https://github.com/fsprojects/fantomas)\r\n* `textDocument/references`\r\n* `textDocument/documentHighlight`\r\n* `textDocument/signatureHelp`\r\n* `textDocument/documentSymbol`\r\n* `workspace/didChangeWatchedFiles`\r\n* `workspace/didChangeConfiguration`\r\n* `workspace/symbol`\r\n\r\n### Custom endpoints\r\n\r\nCustom endpoints are using (for messages body) `PlainNotification` type and string format serialized with exactly same serialization format as old JSON protocol\r\n\r\n* `fsharp/signature` - accepts `TextDocumentPositionParams`, returns signature of symbol at given position as a formatted string\r\n* `fsharp/signatureData` - accepts `TextDocumentPositionParams`, returns signature of symbol at given position as DTO\r\n* `fsharp/lineLens` - accepts `ProjectParms` (`Project` filed contain F# file path), returns locations where LineLenses should be displayed\r\n* `fsharp/compilerLocation` - no input, returns paths to FCS, FSI and MsBuild\r\n* `fsharp/compile` - accepts `ProjectParms`, tries to compile project, returns list of errors and exit status code\r\n* `fsharp/workspacePeek` - accepts `WorkspacePeekRequest`, returns list of possible workspaces (resolved solution files, or list of projects if there are no solution files)\r\n* `fsharp/workspaceLoad` - accepts `WorkspaceLoadParms`, loads given list of projects in the background, partial result notified by `fsharp/notifyWorkspace` notification\r\n* `fsharp/project` - accepts `ProjectParms`, loads given project\r\n* `fsharp/fsdn` - accepts `ProjectParms` (`Project` filed contain query string), query FSDN and returns list of functions\r\n* `fsharp/f1Help` - accepts `TextDocumentPositionParams`, returns URL to MSDN documentation for symbol at given position\r\n* `fsharp/documentation` - accepts `TextDocumentPositionParams`, returns documentation data about symbol at given position, used for InfoPanel\r\n* `fsharp/documentationSymbol` - accepts `DocumentationForSymbolReuqest`, returns documentation data about given symbol from given assembly, used for InfoPanel\r\n\r\n### Supported LSP notifications\r\n\r\n* `window/showMessage`\r\n* `window/logMessage`\r\n* `textDocument/publishDiagnostics`\r\n\r\n### Custom notifications\r\n\r\n* `fsharp/notifyWorkspace` - notification for workspace/solution/project loading events\r\n* `fsharp/notifyWorkspacePeek` - notification for initial workspace peek\r\n\r\n### Additional startup options\r\n\r\n* `--background-service-enabled` - passing this flag enables background service feature, increasing FSAC responsiveness by moving some of the operations (especially background type checking) to other process. It results in increased memory usage. Used by default in Ionide.\r\n* `--verbose` - passing this flag enables additional logging being printed out in `stderr`\r\n* `DOTNET_ROOT` - setting this environment variable will set the dotnet SDK root, which is used when finding references for FSX scripts.\r\n\r\n### Initialization options\r\n\r\nOptions that should be send as `initializationOptions` as part of `initialize` request.\r\n\r\n* `AutomaticWorkspaceInit` - setting it to `true` will start Workspace Loading without need to run `fsharp/workspacePeek` and `fsharp/workspaceLoad` commands. It will always choose top workspace from the found list - all projects in workspace if 0 `.sln` files are found, `.sln` file if 1 `.sln` file was found, `.sln` file with most projects if multiple `.sln` files were found. It's designed to be used in clients that doesn't allow to create custom UI for selecting workspaces.\r\n\r\n### Settings\r\n\r\n* `FSharp.keywordsAutocomplete` - provides keywords in autocomplete list, recommended default value: `true`\r\n* `FSharp.ExternalAutocomplete` - provides autocomplete for symbols from not opened namespaces/modules, insert `open` on accept, recommended default value: `false`\r\n* `FSharp.Linter` - enables FSharpLint integration, provides additional warnings and code action fixes, recommended default value: `true`\r\n* `FSharp.UnionCaseStubGeneration` - enables code action to generate pattern matching cases, recommended default value: `true`\r\n* `FSharp.UnionCaseStubGenerationBody` - defines dummy body used by pattern matching generator, recommended default value: `\"failwith \\\"Not Implemented\\\"\"`\r\n* `FSharp.RecordStubGeneration` - enables code action to generate record stub, recommended default value: `true`\r\n* `FSharp.RecordStubGenerationBody` - defines dummy body used by record stub generator, recommended default value: `\"failwith \\\"Not Implemented\\\"\"`\r\n* `FSharp.InterfaceStubGeneration` - enables code action to generate interface stub, recommended default value: `true`\r\n* `FSharp.InterfaceStubGenerationObjectIdentifier` - defines object identifier used by interface stub generator,recommended default value: `\"this\"`\r\n* `FSharp.InterfaceStubGenerationMethodBody` - defines dummy body used by interface stub generator, recommended default value: `\"failwith \\\"Not Implemented\\\"\"`\r\n* `FSharp.UnusedOpensAnalyzer` - enables unused `open` detections, recommended default value: `true`\r\n* `FSharp.UnusedDeclarationsAnalyzer` - enables unused symbol detection, recommended default value: `true`\r\n* `FSharp.UseSdkScripts` - enables the use of .Net Core SDKs for script file type-checking and evaluation, otherwise the .Net Framework reference lists will be used. Recommended default value: `true`. Current default value: `false`\r\n* `FSharp.SimplifyNameAnalyzer` - enables simplify name analyzer and remove redundant qualifier quick fix, recommended default value: `false`\r\n* `FSharp.ResolveNamespaces` - enables resolve namespace quick fix (add `open` if symbol is from not yet opened module/namespace), recommended default value: `true`\r\n* `FSharp.EnableReferenceCodeLens` - enables reference count code lenses, recommended default value: `true` if `--background-service-enabled` is used by default, `false` otherwise\r\n* `FSharp.dotNetRoot` - sets the root path for finding dotnet SDK references. Primarily used for FSX Scripts. Default value: operating-system dependent. On windows, `C:\\Program Files\\dotnet`; on Unix, `/usr/local/share/dotnet`\r\n* `FSharp.fsiExtraParameters` - an array of additional runtime arguments that are passed to FSI. These are used when typechecking scripts to ensure that typechecking has the same context as your FSI instances.  An example would be to set the following parameters to enable Preview features (like opening static classes) for typechecking."},{"uri":"/Editors/Code/editing.html","title":"Editing evolved","content":"# Editing evolved\r\n\r\nIonide provides variety of language features known from more IDEs such as VS, and set of innovative features that makes you more productive then ever when writing F# code like CodeLenses, integration with FSharpLint and Quick Fixes.\r\n\r\n## Basic features\r\n\r\nFollowing documentation is basic overview of features from Ionide's point of view. If you want to learn more about capabilities of VSCode visit [official documentation](https://code.visualstudio.com/docs/editor/codebasics). We strongly recommend exploring detailed VSCode documentation, especially if you've never worked with similar (Atom, ST3) editor before.\r\n\r\n### IntelliSense\r\n\r\nIf Ionide knows possible completions, the IntelliSense suggestions will pop up as you type. If you continue typing characters, the list of members (variables, methods, etc.) is filtered to include only members containing your typed characters. Pressing `Tab` or `Enter` will insert the selected member.\r\n\r\nYou can trigger IntelliSense in any editor window by typing `Ctrl+Space` or by typing a trigger character (such as the dot character (`.`)).\r\n\r\n> Tip: The suggestions widget supports CamelCase filtering meaning you can type the letters which are upper cased in a method name to limit the suggestions. For example, \"cra\" will quickly bring up \"createApplication\".\r\n\r\nAdditionally, Ionide provides autocompletion for symbols not defined in currently opened modules and namespaces. If you accept such completion with `Tab` or `Enter` it will automatically insert appropriate `open` statement. This behavior is controlled by `FSharp.externalAutocomplete` setting (default value is `true`).\r\n\r\n---\r\n\r\nAdditionally, you can see quick info for each method by either pressing `Ctrl+Space` or clicking the info icon. The accompanying documentation for the method will now expand to the side. The expanded documentation will stay so and will update as you navigate the list. You can close this by pressing `Ctrl+Space` again or by clicking on the close icon.\r\n\r\n<img class=\"gif\" src=\"/static/images/autocomplete.gif\" />\r\n\r\n### Tooltips\r\n\r\nIonide provides rich information about the symbols you hover on - structured signature and nicely formatted documentation text supporting markdown inside of the comments and transforming standard XML comment tags into markdown representation.\r\n\r\n> Tip: If you press `Ctrl` while hovering Ionide will also put the body of the symbol in the tooltip.\r\n\r\n<img class=\"gif\" src=\"/static/images/tooltips.gif\" />\r\n\r\n\r\n### Error highlighting\r\n\r\nIonide provides fast error highlighting for local changes, changes in current project and cross project changes without any need to build projects. Error highlighting for current projects works as you edit code, it supports files not saved to disk. For cross project error reporting you need to save the file - it will queue background project type checking which will provide errors asynchronously without blocking any editor operations.\r\n\r\nErrors in VSCode are shown in multiple places:\r\n* In the status bar, there is a summary of all errors and warnings counts.\r\n* You can click on the summary or press `Ctrl+Shift+M` to display the `PROBLEMS` panel with a list of all current errors.\r\n* If you open a file that has errors or warnings, they will be rendered inline with the text and in the overview ruler.\r\n\r\n> Tip: To loop through errors or warnings in the current file, you can press `F8` or `Shift+F8` which will show an inline zone detailing the problem and possible code actions (if available).\r\n\r\n<img class=\"gif\" src=\"/static/images/errors.gif\" />\r\n\r\n\r\n### CodeLens and LineLens\r\n\r\nIonide displays type signatures of the symbols either as information over the symbol (inserting virtual line) or as inlined information next to symbol. The behavior is customizable with `editor.codeLens`, `FSharp.lineLens.enabled` and `FSharp.lineLens.*` settings.\r\n\r\n### Quick Info panel\r\n\r\nYou can check the type of symbol on which cursor currently is in the left part of VSCode Status Bar (bottom bar with different additional information about current position and file)\r\n\r\n### Generate record stubs\r\n\r\nYou can generate record stubs by using the `Quick Fix` feature (Default keyboard shortcut is `Ctrl+.`). The feature is activated in two ways:\r\n\r\n* Using a type hint ```let p : Person = { }``` with the cursor over `Person`\r\n* Starting to type the fields of the record\r\n\r\n<img class=\"gif\" src=\"/static/images/generateRecordStubs.gif\" />\r\n\r\n### Generate pattern matching stubs\r\n\r\nYou can generate pattern matching stubs by using the `Quick Fix` feature (Default keyboard shortcut is `Ctrl+.`).\r\n\r\n### Generate object expression implementation stub\r\n\r\nYou can generate object expression implementation stub by using the `Quick Fix` feature (Default keyboard shortcut is `Ctrl+.`).\r\n\r\n## Code navigation\r\n\r\nVisual Studio Code has a high productivity code editor which, when combined with programming language services, gives you the power of an IDE and the speed of a text editor. In this part we will show different ways of navigating around the code.\r\n\r\n### Go to definition\r\n\r\nIonide provides going to symbol definition. You can do that by pressing `F12`, pressing right click on symbol and choosing `Go to definition` or by using `Ctrl+Click` or running `Go to definition` from Command Palette.\r\n\r\n> Tip: You can use `Ctrl+Alt+Click` or open the definition to the side in additional editor panel.\r\n\r\n### Go to type definition\r\n\r\nIonide provides going to definition of the type of current symbol if the type was defined in local workspace. You can do that by running the `Go to Type Definition` command from either the editor context menu or the Command Palette.\r\n\r\n> Tip: The command `editor.action.goToTypeDefinition` is not bound to a keyboard shortcut by default but you can add your own custom keybinding.\r\n\r\n### Go to symbol in file\r\n\r\nYou can navigate symbols inside a file with `Ctrl+Shift+O`. Just press `Up` or `Down` and navigate to the place you want.\r\n\r\n> Tip: By typing `:` the symbols will be grouped by category.\r\n\r\n### Go to symbol in workspace\r\n\r\nIonide support jumping to a symbol across files with `Ctrl+T`. Just type the first letter of a symbol you want to navigate to, regardless of which file contains it, and press `Enter`.\r\n\r\n<img class=\"gif\" src=\"/static/images/goToSymbol.gif\" />\r\n\r\n### Find all references & Peek definition\r\n\r\nIonide also implements providers for finding all references (`Shift+F12`) of the symbol in currently open solution and peeking definition of the symbol (`Alt+F12`). VSCode provides peeked editors which enables you to see the source code of the other file inlined without switching context. You can navigate between different references in the peeked editor and make quick edits right there. Clicking on the peeked editor filename or double-clicking in the result list will open the reference in the outer editor.\r\n\r\n<img class=\"gif\" src=\"/static/images/peek.gif\" />\r\n\r\n### Bracket matching\r\n\r\nMatching brackets will be highlighted as soon as the cursor is near one of them.\r\n\r\n> Tip: You can jump to the matching bracket with `Ctrl+Shift+\\`\r\n\r\n### Go to next symbol usage\r\n\r\nUsages of symbol in current file will be highlighted as soon as the cursor is on the symbol.\r\n\r\n> Tip: You can jump to the next/previous usage with `F7` and `Shift+F7`\r\n\r\n### Go to MSDN help\r\n\r\nIonide provides command for opening MSDN documentation for given symbol. It works only for symbols from F# standard library, and .Net standard library. You can execute command with `Shift+F1` or from Command Palette (`F#: Get Help`).\r\n\r\n### CodeOutline panel\r\n\r\nIonide provides live updated panel showing symbols in current file. It's available as a additional tree view (`F# Code Outline`) in VSCode Explorer panel. On the panel you can notice 2 buttons - right one collapse (`Click`) or extends (`Alt+Click`) all elements in the tree, left one refreshes default collapsing (only modules and namespaces extended, types collapsed).\r\n\r\n> Tip: Clicking on any node in the tree will move you to the place in file where symbol is defined. It's really useful for navigating around huge files.\r\n\r\n<img class=\"gif\" src=\"/static/images/codeOutline.gif\" />\r\n\r\n## Advanced analyzers\r\n\r\n### FSharpLint integration\r\n\r\n### Unused value analyzer\r\n\r\n### Unnecessary open statement analyzer\r\n\r\n### Simplify name analyzer\r\n\r\n## Refactoring\r\n\r\n### Rename symbol\r\n\r\n### Quick fixes\r\n\r\n### Generate comment scaffold\r\n"},{"uri":"/Editors/Code/generalInfo.html","title":"General information","content":"\r\n# General information\r\n\r\nIonide is complex tool with many options, and powerful capabilities, supporting multiple scenarios available to F# developers. As such is crucial to learn some general information about Ionide's requirements, and different configuration options that should be used depending on the different runtime and environments that can be used.\r\n\r\n### Getting Requirements\r\n\r\n* F# (Windows) - Easiest way to install latest versions of F# on Windows is using [VS Build Tools 2017](https://visualstudio.microsoft.com/downloads/?utm_medium=microsoft&utm_source=docs.microsoft.com&utm_campaign=button+cta&utm_content=download+vs2017#build-tools-for-visual-studio-2017). If you use VS 2017, make sure that you've installed workload adding F# support.\r\n\r\n* F# (Linux/MacOS) - F# on non-Windows platform is distributed as part of the `mono`. Installation guide and recent version of `mono` can be found on the [project webpage](https://www.mono-project.com/download/stable/) and on the F# Software Foundation [\"Use on Linux\" page](https://fsharp.org/use/linux/)\r\n\r\n* .Net Core SDK - .Net Core is modern, cross platform implementation of .Net Framework. Ionide is requiring it for set of features such as project modifications or debugging. The core part of SDK is `dotnet` CLI tool that provides easy way to create, build and run F# projects. What's important - the `dotnet` tool can be used also to create applications targeting also Full Framewok (like `net461`). For detailed instructions on installing .Net Core visit [official step-by-step installation guide](https://www.microsoft.com/net/core)\r\n\r\n* VSCode C# plugin (optional) - Ionide's debugging capabilities relies on the debugger provided by Omnisharp team. To get it install [C# extension from VSCode marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp)\r\n\r\n* MsBuild 2015 (Windows only, optional) - For old, verbose `.fsproj` files on Windows MsBuild 2015 (14.0) needs to be additionally installed. You can download it [here](https://www.microsoft.com/en-us/download/details.aspx?id=48159). However, we highly recommend using new, SDK-based project files.\r\n\r\n### Project files parsing\r\n\r\nIonide supports both old, verbose project files, and new SDK based files. However, we **strongly recommend** using SDK based project files. Plugin is also supporting parsing `.sln` files. When you open VSCode in particular workspace, Ionide will try to find all `.sln` files in this workspace and you will be presented with the option to open particular solution, or ignore solution files and load all projects in the solution.\r\n\r\n<img class=\"gif\" src=\"/static/images/chooseSolution.png\" />\r\n\r\n\r\nWhen Ionide detects any F# projects it will display them in the `Solution Explorer`. To access it you need to press F# logo button on the activity bar. In there you will see list of F# projects, their status, list of file and references. You can also right-click on different nodes in the tree to access operations that can be performed by the Ionide, such as `Build Project` or `Add file`.\r\n\r\n<img class=\"gif\" src=\"/static/images/projectExplorer.png\" />\r\n\r\n> NOTE: In case of the problems with project parsing (Projects in status `loading failed`) you can right-click on the project node and use `Show Project Status` to see more details about the problem. We also recommend using `F#: Clear Cache` action and reloading the window, as first step in debugging any problems.\r\n\r\n### FsAutoComplete Service Runtime\r\n\r\nThe Ionide plugin relies on the F# compiler services for processing code in the editor.  The compiler services can run under the full framework (requiring `mono` on non-Windows platforms) or they can run under .NET Core as of Ionide 3.13.0.  This experimental feature can be enabled in the user settings.\r\n\r\n`Preferences > Settings` and add a new setting\r\n```json\r\n\"FSharp.fsacRuntime\": \"netcore\"\r\n```\r\n\r\nThere are two options:\r\n\r\n* `netcore` (default) .NET Core framework\r\n* `net`  full framework\r\n\r\nAfter updating this setting, execute the `Reload Window` command in VS Code for the setting to take effect.\r\n\r\n> NOTE: projects that use functionality incompatible with .NET Core, such as type providers, require this be set to `net` in order for the F# Autocomplete Service to process code using these features.\r\n\r\n### MsBuild Host\r\n\r\nThe Ionide plugin provides deep integration with MsBuild - starting from project parsing (process of getting list of files, references and properties out of `fsproj` file) through project modifications (adding new files, ordering them, adding project-to-project references) to building and running projects. All features provided by Ionide in area of project management are described more in [Project](project) section.\r\n\r\nIonide can use either MsBuild installation provided by Full Framework (installed by VS / VS Build Tools on Windows and by Mono on Linux/MacOS) or the cross platform version of MsBuild provided by .Net Core SDK. In most cases Ionide makes automatic decision which one to use based on the type of project file, but projects that use functionality incompatible with .NET Core, such as type providers not updated to latest TP SDK, require using Full Framework installation of MsBuild.\r\n\r\nTo control MsBuild Host that's used by Ionide you need to go to the F# Solution Explorer view and use `F#: Pick MsBuild Host` action\r\n\r\n<img class=\"gif\" src=\"/static/images/pickMsBuildHost.png\" />"},{"uri":"/Editors/Code/getting_started.html","title":"Getting started","content":"\r\n# Getting started\r\n\r\n## Requirements\r\n\r\n* Visual Studio Code - it is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux created by Microsoft. For detailed documentation of editor, getting-started guides and more visit [official documentation](https://code.visualstudio.com/docs).\r\n\r\n* F# - it is a mature, open source, cross-platform, functional-first programming language. It empowers users and organizations to tackle complex computing problems with simple, maintainable and robust code. Ionide supports any version of F# >= 3.0 but we do recommend using F# 4.1. Detailed installation instructions can be found of F# Software foundation webpage - for [Windows](http://fsharp.org/use/windows/), [MacOS](http://fsharp.org/use/mac/), and [Linux](http://fsharp.org/use/linux/)\r\n\r\n* .Net Core SDK - .Net Core is lightweight, cross platform, modern implementation of .Net Framework. We strongly recommend installing it since some advanced Ionide features such as debugging and project scaffolding depends on SDK and `dotnet` CLI tooling even if your application is targetting Full Framework. For detailed instructions on installing .Net Core visit [official step-by-step installation guide](https://www.microsoft.com/net/core)\r\n\r\n* VSCode C# plugin (optional) - Ionide's debugging capabilities relies on the debugger provided by Omnisharp team. To get it install [C# extension from VSCode marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp)\r\n\r\n* MsBuild 2015 (Windows only, optional) - For old, verbose `.fsproj` files on Windows MsBuild 2015 (14.0) needs to be additionally installed. You can download it [here](https://www.microsoft.com/en-us/download/details.aspx?id=48159). However, we highly recommend using new, SDK-based project files.\r\n\r\n## Plugin installation\r\n\r\nAny VSCode extension can be installed using UI just inside VSCode. Bring up the Extensions view by clicking on the Extensions icon in the Activity Bar on the side of VS Code or the `View: Extensions` command (`Ctrl+Shift+X`). Then in search box type `Ionide` to find all 3 extensions we provide. Click the `Install` button and after a successful install, you'll see an `Reload` button which will prompt you to restart VS Code to enable the new extension. For more detailed information about plugin installation visit [VSCode documentation](https://code.visualstudio.com/docs/editor/extension-gallery)\r\n\r\n## Plugin activation\r\n\r\nVSCode plugins are running in external processes (which means they should never impact editor performance) and are activated lazily, when certain activation events happens. This means that plugins are not loaded unnecesserly, for example when you don't work on project using given programming language.\r\n\r\nIonide plugins are activated when:\r\n\r\n* Opened workspace contains any `.fsproj`, `.fs`, or `.fsx` file\r\n\r\n* New `.fsproj`, `.fs`, or `.fsx` file is created in workspace that was not containing those files before.\r\n"},{"uri":"/Editors/Code/options.html","title":"List of options","content":"\r\n# List of options\r\n\r\n## How to set an option?\r\n\r\nIt is easy to configure Visual Studio Code to your liking through its various settings. Nearly every part of VS Code's editor, user interface, and functional behavior has options you can modify.\r\n\r\nVS Code provides two different scopes for settings:\r\n\r\n* **User Settings** - Settings that apply globally to any instance of VS Code you open.\r\n* **Workspace Settings** - Settings stored inside your workspace and only apply when the workspace is opened.\r\n\r\nWorkspace settings override user settings. Workspace settings are specific to a project and can be shared across developers on a project.\r\n\r\n> Note: A VS Code \"workspace\" is usually just your project root folder\r\n\r\nTo open your user and workspace settings, use the following VS Code menu command:\r\n\r\n* On Windows/Linux - `File > Preferences > Settings`\r\n* On macOS - `Code > Preferences > Settings`\r\n\r\nYou can also open the Settings editor from the Command Palette (`Ctrl+Shift+P`) with `Preferences: Open Settings` or use the keyboard shortcut (`Ctrl+,`).\r\n\r\nRead more about settings in VSCode in [VSCode documentation](https://code.visualstudio.com/docs/getstarted/settings)\r\n\r\n---\r\n\r\n#### `FSharp.fsac.netCoreDllPath`\r\n\r\nThe path to the `fsautocomplete.dll`, useful for debugging a self-built fsac.\r\n\r\n**Type:** `string`\r\n\r\n**Default:** ` `\r\n\r\n---\r\n\r\n#### `FSharp.fsac.netExePath`\r\n\r\nThe path to the `fsautocomplete.exe`, useful for debugging a self-built fsac.\r\n\r\n**Type:** `string`\r\n\r\n**Default:** ` `\r\n\r\n---\r\n\r\n#### `FSharp.fsac.attachDebugger`\r\n\r\nAppends the '--attachdebugger' argument to fsac, this will allow you to attach the debugger.\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `false`\r\n\r\n---\r\n\r\n#### `FSharp.fsacRuntime`\r\n\r\nChoose the runtime of FsAutocomplete (FSAC). Requires restart.\r\n\r\n**Type:** `enum`\r\n\r\n**Possible values:**\r\n * `net`\r\n * `netcore`\r\n\r\n**Default:** `netcore`\r\n\r\n---\r\n\r\n#### `FSharp.workspaceModePeekDeepLevel`\r\n\r\nThe deep level of directory hierarchy when searching for sln/projects\r\n\r\n**Type:** `int`\r\n\r\n**Default:** `4`\r\n\r\n---\r\n\r\n#### `FSharp.monoPath`\r\n\r\nThe path to Mono executable\r\n\r\n**Type:** `string`\r\n\r\n**Default:** `mono`\r\n\r\n---\r\n\r\n#### `FSharp.fsiFilePath`\r\n\r\nThe path to the F# Interactive tool used by Ionide-FSharp\r\n\r\n**Type:** `string`\r\n\r\n**Default:** ` `\r\n\r\n---\r\n\r\n#### `FSharp.keywordsAutocomplete`\r\n\r\nIncludes keywords in autocomplete\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `true`\r\n\r\n---\r\n\r\n#### `FSharp.externalAutocomplete`\r\n\r\nIncludes external (from unopen modules and namespaces) symbols in autocomplete\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `false`\r\n\r\n---\r\n\r\n#### `FSharp.linter`\r\n\r\nEnables integration with FSharpLinter (additional warnings)\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `true`\r\n\r\n---\r\n\r\n#### `FSharp.unionCaseStubGeneration`\r\n\r\nEnables pattern matching stub generation\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `true`\r\n\r\n---\r\n\r\n#### `FSharp.unionCaseStubGenerationBody`\r\n\r\nGenerated pattern matching case default body\r\n\r\n**Type:** `string`\r\n\r\n**Default:** `failwith \\\"Not Implemented\\\"`\r\n\r\n---\r\n\r\n#### `FSharp.recordStubGeneration`\r\n\r\nEnables record stub generation\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `true`\r\n\r\n---\r\n\r\n#### `FSharp.recordStubGenerationBody`\r\n\r\nGenerated record field default body\r\n\r\n**Type:** `string`\r\n\r\n**Default:** `failwith \\\"Not Implemented\\\"`\r\n\r\n---\r\n\r\n#### `FSharp.interfaceStubGeneration`\r\n\r\nEnables interface stub generation\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `true`\r\n\r\n---\r\n\r\n#### `FSharp.interfaceStubGenerationMethodBody`\r\n\r\nGenerated member default body\r\n\r\n**Type:** `string`\r\n\r\n**Default:** `failwith \\\"Not Implemented\\\"`\r\n\r\n---\r\n\r\n#### `FSharp.interfaceStubGenerationObjectIdentifier`\r\n\r\nGenerated member default object identifier\r\n\r\n**Type:** `string`\r\n\r\n**Default:** `this`\r\n\r\n---\r\n\r\n#### `FSharp.unusedOpensAnalyzer`\r\n\r\nEnables detection of unused opens\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `true`\r\n\r\n---\r\n\r\n#### `FSharp.unusedDeclarationsAnalyzer`\r\n\r\nEnables detection of unused declarations\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `true`\r\n\r\n---\r\n\r\n#### `FSharp.simplifyNameAnalyzer`\r\n\r\nEnables detection of symbols usages that can be simplified\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `true`\r\n\r\n---\r\n\r\n#### `FSharp.fsiExtraParameters`\r\n\r\nAllows to pass extra parameters to FSI process\r\n\r\n**Type:** `array`\r\n\r\n**Default:** `[]`\r\n\r\n---\r\n\r\n#### `FSharp.saveOnSendLastSelection`\r\n\r\nSave Current file before send LastSelection to FSI\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `false`\r\n\r\n---\r\n\r\n#### `FSharp.msbuildLocation`\r\n\r\nUse a specific version of msbuild to build this project.\r\n\r\n**Type:** `string`\r\n\r\n**Default:** ` `\r\n\r\n---\r\n\r\n#### `FSharp.msbuildAutoshow`\r\n\r\nAutomatically shows MsBuild output panel\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `false`\r\n\r\n---\r\n\r\n#### `FSharp.msbuildHost`\r\n\r\nMSBuild host\r\n\r\n**Type:** `enum`\r\n\r\n**Possible values:**\r\n * `.net`\r\n * `.net core`\r\n * `ask at first use`\r\n * `auto`\r\n\r\n**Default:** `auto`\r\n\r\n---\r\n\r\n#### `FSharp.resolveNamespaces`\r\n\r\nEnables `resolve unopened namespaces and modules` code fix.\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `true`\r\n\r\n---\r\n\r\n#### `FSharp.enableTreeView`\r\n\r\nEnables solution explorer.\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `true`\r\n\r\n---\r\n\r\n#### `FSharp.excludeProjectDirectories`\r\n\r\nDirectories in the array are excluded from project file search. Requires restart.\r\n\r\n**Type:** `array`\r\n\r\n**Default:** `[\".git\",\"paket-files\",\".fable\",\"packages\",\"node_modules\"]`\r\n\r\n---\r\n\r\n#### `FSharp.lineLens.enabled`\r\n\r\nUsage mode for LineLens\r\n\r\n**Type:** `enum`\r\n\r\n**Possible values:**\r\n * `never`\r\n * `replaceCodeLens`\r\n * `always`\r\n\r\n**Default:** `replaceCodeLens`\r\n\r\n---\r\n\r\n#### `FSharp.lineLens.prefix`\r\n\r\nThe prefix displayed before the signature\r\n\r\n**Type:** `string`\r\n\r\n**Default:** `//`\r\n\r\n---\r\n\r\n#### `FSharp.disableFailedProjectNotifications`\r\n\r\nDisables popup notifications for failed project loading\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `false`\r\n\r\n---\r\n\r\n#### `FSharp.enableBackgroundServices`\r\n\r\nEnables background services responsible for creating symbol cache and typechecking files in the background. Requires restart.\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `true`\r\n\r\n---\r\n\r\n#### `FSharp.enableReferenceCodeLens`\r\n\r\nEnables additional code lenses showing number of references. Requires background services\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `true`\r\n\r\n---\r\n\r\n#### `FSharp.showProjectExplorerIn`\r\n\r\nSet the activity (left bar) where the project explorer view will be displayed.Requires restart.\r\n\r\n**Type:** `enum`\r\n\r\n**Possible values:**\r\n * `explorer`\r\n * `fsharp`\r\n\r\n**Default:** `fsharp`\r\n\r\n---\r\n\r\n#### `FSharp.enableAnalyzers`\r\n\r\nEXPERIMENTAL. Enables custom analyzers. Requires restart.\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `false`\r\n\r\n---\r\n\r\n#### `FSharp.analyzersPath`\r\n\r\nDirectories in the array are used as a source of custom analyzers. Requires restart.\r\n\r\n**Type:** `array`\r\n\r\n**Default:** `[\"packages/Analyzers\", \"analyzers\"]`\r\n\r\n---\r\n\r\n#### `FSharp.workspacePath`\r\n\r\nPath to the directory or solution file that should be loaded as a workspace\r\n\r\n**Type:** `string`\r\n\r\n---\r\n\r\n#### `FSharp.showExplorerOnStartup`\r\n\r\nAutomatically shows solution explorer on plugin startup\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `true`\r\n\r\n---\r\n\r\n#### `FSharp.enableTouchBar`\r\n\r\nEnables TouchBar integration\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `true`\r\n\r\n---\r\n\r\n#### `FSharp.autoRevealInExplorer`\r\n\r\nSet the activity (left bar) where the project explorer view will be displayed.Requires restart.\r\n\r\n**Type:** `enum`\r\n\r\n**Possible values:**\r\n * `sameAsFileExplorer`\r\n * `enabled`\r\n * `disabled`\r\n\r\n**Default:** `sameAsFileExplorer`\r\n\r\n---\r\n\r\n#### `FSharp.smartIndent`\r\n\r\nEnables smart indent feature\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `false`\r\n\r\n---\r\n\r\n#### `FSharp.infoPanelUpdate`\r\n\r\nControls when the info panel is updated\r\n\r\n**Type:** `enum`\r\n\r\n**Possible values:**\r\n * `onCursorMove`\r\n * `onHover`\r\n * `both`\r\n * `none`\r\n\r\n**Default:** `onCursorMove`\r\n\r\n---\r\n\r\n#### `FSharp.infoPanelReplaceHover`\r\n\r\nControls whether the info panel replaces tooltips\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `false`\r\n\r\n---\r\n\r\n#### `FSharp.infoPanelStartLocked`\r\n\r\nControls whether the info panel should be locked at startup\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `false`\r\n\r\n---\r\n\r\n#### `FSharp.infoPanelShowOnStartup`\r\n\r\nControls whether the info panel should be displayed at startup\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `false`\r\n\r\n---\r\n\r\n#### `FSharp.verboseLogging`\r\n\r\nLogs additional information to F# output channel. Requires restart.\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `false`\r\n\r\n---\r\n\r\n#### `FAKE.targetsOutline`\r\n\r\nEnables the Targets Outline tree view.\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `true`\r\n\r\n---\r\n\r\n#### `FAKE.showTargetsOutlineIn`\r\n\r\nSet the activity (left bar) where the FAKE targets outline view will be displayed.Requires restart.\r\n\r\n**Type:** `enum`\r\n\r\n**Possible values:**\r\n * `explorer`\r\n * `fsharp`\r\n\r\n**Default:** `explorer`\r\n\r\n---\r\n\r\n#### `FSharp.suggestGitignore`\r\n\r\nAllow Ionide to prompt whenever internal data files aren't included in your project's .gitignore\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `true`\r\n\r\n---\r\n\r\n#### `FSharp.useSdkScripts`\r\n\r\nUse `dotnet fsi` instead of `fsi.exe`/`fsharpi`\r\n\r\n**Type:** `bool`\r\n\r\n**Default:** `false`\r\n\r\n---\r\n\r\n#### `FSharp.dotNetRoot`\r\n\r\nSets the root path for finding dotnet SDK references. Primarily used for FSX Scripts.\r\n\r\n**Type:** `string`\r\n\r\n---"},{"uri":"/Editors/Code/overview.html","title":"Overview","content":"\r\n# Ionide-VSCode\r\n\r\n**GitHub link:** [https://github.com/ionide/Ionide-vim](https://github.com/ionide/Ionide-vscode-fsharp)\r\n**License:** [MIT](https://github.com/ionide/Ionide-vscode-fsharp/blob/master/LICENSE.md)\r\n\r\nIonide is a [Visual Studio Code](https://code.visualstudio.com/) package suite for cross platform F# development.\r\n\r\n<img class=\"gif\" src=\"/static/images/fsharp.gif\" />\r\n\r\n## Overview\r\n\r\nIonide for VSCode is set of 3 plugins avaliable in VSCode marketplace.\r\n\r\n* [Ionide-fsharp](https://marketplace.visualstudio.com/items?itemName=Ionide.Ionide-fsharp) - provides F# specific features including advanced editor features (autocomplete, go-to definition, tooltips, rename, various refactorings and quick fix suggestions), integration with .Net project system, project explorer for project file visualization and manipulation, integration with MsBuild for building and running applications, debugger integration and more.\r\n\r\n<img class=\"gif\" src=\"/static/images/fsi.gif\" />\r\n\r\n\r\n* [Ionide-Paket](https://marketplace.visualstudio.com/items?itemName=Ionide.Ionide-Paket) - provides integration with Paket - package dependency manager for .NET with support for NuGet packages and GitHub repositories.\r\n\r\n<img class=\"gif\" src=\"/static/images/paket.gif\" />\r\n\r\n* [Ionide-FAKE](https://marketplace.visualstudio.com/items?itemName=Ionide.Ionide-fake) - FAKE (F# Make) is popular F# tool and DSL for build orchestration.\r\n\r\n<img class=\"gif\" src=\"/static/images/fake.gif\" />\r\n\r\n## List of features\r\n\r\n#### F# IDE\r\n\r\n* Syntax highlighting\r\n* Error highlighting\r\n* Autocomplete\r\n* Tooltips\r\n* Quick Info Toolbar\r\n* Usages highlighting\r\n* F# Interactive (REPL) panel\r\n* Go-to declaration\r\n* Finding symbols in file\r\n* Go-to any symbol in solution\r\n* Rename\r\n* Find usages\r\n* Peek View declaration\r\n* CodeLens feature showing type signatures\r\n* CodeOutline tree view\r\n* Listing all errors in workspace\r\n* Building using msbuild / xbuild\r\n* Integration with .Net Core\r\n* Project explorer tree view\r\n* Debugging\r\n* Record stub generation\r\n* Union pattern case generation\r\n* Integration with F# Interactive\r\n\r\n#### F# Project management\r\n\r\n* Integration with [Forge](/Tools/forge.html)\r\n* Possibility to create new empty solutions or projects (multiple templates for most popular project types)\r\n* Adding, removing, ordering files in project\r\n* Adding and removing project references\r\n\r\n#### Paket integration\r\n\r\n* Paket initialization\r\n* Adding, installing, updating packages from solution or current project (allows the choice of package version)\r\n* Removing packages from solution or current project\r\n* Converting from NuGet, simplify dependency graph, turning on auto-restore for solution.\r\n* Listing outdated packages\r\n\r\n#### FAKE integration\r\n\r\n* Running any build target defined in FAKE build script\r\n* Running default FAKE target\r\n\r\n#### MSBuild/XBuild integration\r\n\r\n* Build/Clean/Rebuild the current project\r\n* Build/Clean/Rebuild any project in the current workspace\r\n* Works with the most recent version of msbuild/xsbuild on your system, or supply your own\r\n\r\n#### And much more...\r\n\r\n"},{"uri":"/Editors/Vim/getting_started.html","title":"Installation","content":"\r\n# Ionide-vim - Installation\r\n\r\n## Requirements\r\n\r\n* Neovim or Vim 8.0+ - Python support is not required as of now. This may or may not change in the future.\r\n* [.NET Core SDK](https://dotnet.microsoft.com/download) - required to run FsAutoComplete\r\n* [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim) - LSP client used to communicate with FsAutoComplete\r\n* [fzf](https://github.com/junegunn/fzf) (optional) -Optional dependency of LanguageClient-neovim, provides multi-entry selection UI\r\n\r\n## Getting Started\r\n\r\n### 1. Install [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim)\r\n\r\nRefer to [their INSTALL.md](https://github.com/autozimu/LanguageClient-neovim/blob/next/INSTALL.md).\r\n\r\n### 2. Install Ionide-vim\r\n\r\n#### Installing with your plugin manager\r\n\r\n##### [vim-plug](https://github.com/junegunn/vim-plug)\r\n\r\n~~~.vim\r\nPlug 'ionide/Ionide-vim', {\r\n      \\ 'do':  'make fsautocomplete',\r\n      \\}\r\n~~~\r\n\r\n##### [dein.vim](https://github.com/Shougo/dein.vim)\r\n\r\n~~~.vim\r\ncall dein#add('ionide/Ionide-vim', {\r\n    \\ 'build': 'make fsautocomplete',\r\n    \\ })\r\n~~~\r\n\r\n#### Installing manually\r\n\r\nClone Ionide-vim to some runtimepath and run `make fsautocomplete`.\r\n\r\n#### Installing on Windows\r\n\r\nRun `install.cmd`."},{"uri":"/Editors/Vim/overview.html","title":"Overview","content":"\r\n# Ionide-vim\r\n\r\n**GitHub link:** [https://github.com/ionide/Ionide-vim](https://github.com/ionide/Ionide-vim)\r\n**License:** [MIT](https://github.com/ionide/Ionide-vim/blob/master/LICENSE.md)\r\n\r\nIonide-vim is a F# plugin for Vim/Neovim. It's continuation of [fsharp/vim-fsharp](https://github.com/fsharp/vim-fsharp), powered by LSP protocol using [FsAutoComplete](/Tools/fsac.html). On the client side, it's powered by [autozimu/LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim)\r\n\r\n\r\n<img class=\"gif\" src=\"/static/images/vim.gif\" />\r\n\r\n## List of features\r\n\r\n- Syntax highlighting\r\n- Auto completions\r\n- Error highlighting, error list, and quick fixes based on errors\r\n- Tooltips\r\n- Go to Definition\r\n- Find all references\r\n- Highlighting usages\r\n- Rename\r\n- Show symbols in file\r\n- Find symbol in workspace\r\n- Show signature in status line\r\n- Integration with F# Interactive **(new!)**\r\n- Integration with FSharpLint (additional hints and quick fixes) **(new!)**\r\n\r\n\r\n\r\n"},{"uri":"/Editors/Vim/usage.html","title":"How to use","content":"\r\n# How to use\r\n\r\nOpening either `*.fs`, `*.fsi` or `*.fsx` files should trigger syntax highlighting and other depending runtime files as well.\r\n\r\n### Commands\r\n\r\nRefer to [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim) for features provided via Language Server Protocol.\r\n\r\nTo be added as requested for F#-specific features.\r\n\r\n#### `:FSharpLoadWorkspaceAuto`\r\n  - Searches a workspace (`sln` or `fsproj`) and then load it.\r\n  - Equivalent to `FSharp.workspaceMode = sln` in Ionide-VSCode.\r\n  - Automatically called when you open F# files. Can be disabled in settings.\r\n  - The deep level of directory hierarchy to search can also be configured in settings.\r\n\r\n#### `:FSharpParseProject <files>+`\r\n  - Loads specified projects (`sln` or `fsproj`).\r\n\r\n#### `:FSharpReloadWorkspace`\r\n  - Reloads all the projects currently loaded.\r\n  - Automatically called when you save `.fsproj` files. Can be disabled in settings.\r\n\r\n#### `:FSharpUpdateServerConfig`\r\n  - Updates FSAC configuration.\r\n  - See [FsAutoComplete Settings](#fsautocomplete-settings) for details.\r\n\r\n#### `:FSharpUpdateFSAC`\r\n  - Downloads the latest build of FsAutoComplete to be used with Ionide-vim.\r\n\r\n### Working with F# Interactive\r\n\r\nIonide-vim has an integration with F# Interactive.\r\n\r\nFSI is displayed using the builtin `:terminal` feature introduced in Vim 8 / Neovim and can be used like in VSCode.\r\n\r\n#### `:FsiShow`\r\n  - Shows a F# Interactive window.\r\n\r\n#### `:FsiEval <expr>`\r\n  - Evaluates given expression in FSI.\r\n\r\n#### `:FsiEvalBuffer`\r\n  - Sends the content of current file to FSI.\r\n\r\n#### `:FsiReset`\r\n  - Resets the current FSI session.\r\n\r\n#### `Alt-Enter`\r\n  - When in normal mode, sends the current line to FSI.\r\n  - When in visual mode, sends the selection to FSI.\r\n  - Sending code to FSI opens FSI window but the cursor does not focus to it. Unlike Neovim, Vim doesn't support asynchronous buffer updating so you have to input something (e.g. moving cursor) to see the result. You can change this behavior in settings.\r\n\r\n#### `Alt-@`\r\n  - Toggles FSI window. FSI windows shown in different tabpages share the same FSI session.\r\n  - When opened, the cursor automatically focuses to the FSI window (unlike in `Alt-Enter` by default).\r\n\r\nYou can customize the location of FSI, key mappings, etc. See [the documentation below](#f-interactive-settings).\r\n\r\n### Settings\r\n\r\nRefer to [LanguageClient-neovim's recommended settings](https://github.com/autozimu/LanguageClient-neovim/wiki/Recommended-Settings#recommended-settings)\r\nfor features provided via Language Server Protocol.\r\n\r\nTo be added as requested for F#-specific features.\r\n\r\n#### FsAutoComplete Settings\r\n\r\n* Ionide-vim uses `snake_case` for the setting names.\r\n  - For FSAC settings only, `CamelCase` can also be used (as it gets serialized to a F# record).\r\n  - If both `snake_case` and `CamelCase` are specified, the `snake_case` one will be preferred.\r\n* You can change the values at runtime and then notify the changes to FSAC by `:FSharpUpdateServerConfig`.\r\n* Some of the settings may not work in Ionide-vim as it is lacking the corresponding feature of Ionide-VSCode.\r\n* If not specified, the recommended default values described on the FSAC's documentation will be used.\r\n  - If you are using a JSON configuration file though `g:LanguageClient_settingsPath`, the recommended default values will override the settings loaded from it.\r\n  - You can disable this by `let g:fsharp#use_recommended_server_config = 0`.\r\n\r\nSee [the documentation of FSAC](https://github.com/fsharp/FsAutoComplete#settings)\r\nfor the complete list of available settings. Frequently used ones are:\r\n\r\n##### Enable/disable automatic calling of `:FSharpLoadWorkspaceAuto` on opening F# files (default: enabled)\r\n\r\n~~~.vim\r\nlet g:fsharp#automatic_workspace_init = 1 \" 0 to disable.\r\n~~~\r\n\r\n##### Set the deep level of directory hierarchy when searching for sln/fsprojs (default: `2`)\r\n\r\n~~~.vim\r\nlet g:fsharp#workspace_mode_peek_deep_level = 2\r\n~~~\r\n\r\n##### Ignore specific directories when loading a workspace (default: empty)\r\n\r\n~~~.vim\r\nlet g:fsharp#exclude_project_directories = ['paket-files']\r\n~~~\r\n\r\n##### Enable/disable linter and unused opens/declarations analyzer (default: all enabled)\r\n\r\nYou may want to bind `LanguageClient#textDocument_codeAction()` to some shortcut key. Refer to their docs.\r\n\r\n~~~.vim\r\n\" 0 to disable.\r\nlet g:fsharp#linter = 1\r\nlet g:fsharp#unused_opens_analyzer = 1\r\nlet g:fsharp#unused_declarations_analyzer = 1\r\n~~~\r\n\r\n#### Editor Settings\r\n\r\n##### Enable/disable automatic calling of `:FSharpReloadWorkspace` on saving `fsproj` (default: enabled)\r\n\r\n~~~.vim\r\nlet g:fsharp#automatic_reload_workspace = 1 \" 0 to disable.\r\n~~~\r\n\r\n##### Show type signature at cursor position (default: enabled)\r\n\r\n~~~.vim\r\nlet g:fsharp#show_signature_on_cursor_move = 1 \" 0 to disable.\r\n~~~\r\n\r\n#### F# Interactive Settings\r\n\r\n##### Change the F# Interactive command to be used within Ionide-vim (default: `dotnet fsi`)\r\n\r\nIf you want to use a .NET Framework FSI instead of .NET Core one, set `g:fsharp#use_sdk_scripts` to `0`.\r\nSee: https://github.com/fsharp/FsAutoComplete/pull/466#issue-324869672\r\n\r\n~~~.vim\r\nlet g:fsharp#fsi_command = \"fsharpi\"\r\nlet g:fsharp#use_sdk_scripts = 0 \" for net462 FSI\r\n~~~\r\n\r\n##### Set additional runtime arguments passed to FSI (default: `[]` (empty))\r\n\r\nSets additional arguments of the FSI instance Ionide-vim spawns and changes the behavior of FSAC accordingly when editing fsx files.\r\n\r\n~~~.vim\r\nlet g:fsharp#fsi_extra_parameters = ['--langversion:preview']\r\n~~~\r\n\r\n##### Customize how FSI window is opened (default: `botright 10new`)\r\n\r\nIt must create a new empty window and then focus to it.\r\n\r\nSee [`:help opening-window`](http://vimdoc.sourceforge.net/htmldoc/windows.html#opening-window) for details.\r\n\r\n~~~.vim\r\nlet g:fsharp#fsi_window_command = \"botright vnew\"\r\n~~~\r\n\r\n##### Set if sending line/selection to FSI shoule make the cursor focus to FSI window (default: disabled)\r\n\r\nIf you are using Vim, you might want to enable this to see the result without inputting something.\r\n\r\n~~~.vim\r\nlet g:fsharp#fsi_focus_on_send = 1 \" 0 to not to focus.\r\n~~~\r\n\r\n##### Change the key mappings (default: `vscode`)\r\n\r\n* `vscode`:     Default. Same as in Ionide-VSCode (`Alt-Enter` to send, `Alt-@` to toggle terminal).\r\n  - `<M-CR>` in Neovim / `<ESC><CR>` in Vim: Sends line/selection to FSI.\r\n  - `<M-@>`  in Neovim / `<ESC>@`    in Vim: Toggles FSI window.\r\n* `vim-fsharp`: Same as in [fsharp/vim-fsharp](https://github.com/fsharp/vim-fsharp#fsharp-interactive). Note that `<leader>` is mapped to backslash by default. See [`:help mapleader`](http://vimdoc.sourceforge.net/htmldoc/map.html#mapleader).\r\n  - `<leader>i` : Sends line/selecion to FSI.\r\n  - `<leader>e` : Toggles FSI window.\r\n* `custom`:     You must set both `g:fsharp#fsi_keymap_send` and `g:fsharp#fsi_keymap_toggle` by yourself.\r\n  - `g:fsharp#fsi_keymap_send`   : Sends line/selection to FSI.\r\n  - `g:fsharp#fsi_keymap_toggle` : Toggles FSI window.\r\n* `none`:       Disables mapping.\r\n\r\n~~~.vim\r\n\" custom mapping example\r\nlet g:fsharp#fsi_keymap = \"custom\"\r\nlet g:fsharp#fsi_keymap_send   = \"<C-e>\"\r\nlet g:fsharp#fsi_keymap_toggle = \"<C-@>\"\r\n~~~\r\n\r\n### Advanced Tips\r\n\r\n#### Show tooltips on CursorHold\r\n\r\nIf you are using neovim 0.4.0 or later, floating windows will be used for tooltips and you might find it convenient to make them appear if the cursor does not move for several seconds.\r\n\r\n~~~.vim\r\nif has('nvim') && exists('*nvim_open_win')\r\n  augroup FSharpShowTooltip\r\n    autocmd!\r\n    autocmd CursorHold *.fs,*.fsi,*.fsx call fsharp#showTooltip()\r\n  augroup END\r\nendif\r\n~~~\r\n\r\nNote that you can set the delay time to show the tooltip by [`set updatetime=<ms>`](http://vimdoc.sourceforge.net/htmldoc/options.html#'updatetime'). The default delay is 4 seconds, which you may find too slow."}]